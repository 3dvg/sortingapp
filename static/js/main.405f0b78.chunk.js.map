{"version":3,"sources":["algorithms/heapSort.js","algorithms/mergeSort.js","algorithms/quickSort.js","components/Visualizer.jsx","algorithms/bubbleSort.js","algorithms/insertionSort.js","components/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["arrLength","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getSortedArray","heapSort","maxHeap","input","left","right","max","swap","indexA","indexB","temp","getQuickSortAnimations","quickSort","items","index","pivot","partition","leftIndex","rightIndex","Visualizer","props","randomIntFromInterval","min","random","state","this","resetArray","document","getElementById","disabled","setState","colorBarsDefault","arr","arrayBars","getElementsByClassName","undefined","style","backgroundColor","algorithm_MS","sortedArray","algorithm_HS","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","newHeight","height","count","parseInt","a","doBubble","algorithm_BS","len","el","insertionSort","algorithm_IS","newHeight1","newHeight2","algorithm_QS","Fragment","className","map","value","idx","key","id","onClick","mergeSort","bubbleSort","Component","Navbar","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.405f0b78.chunk.js","sourcesContent":["export function getHeapSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  let arraytowork = array.slice();\n  heapSort(arraytowork, animations);\n\n  return animations;\n}\nexport function getSortedArray(array) {\n  let arraytowork = array.slice();\n  const _animations = [];\n  return heapSort(arraytowork, _animations);\n}\nlet arrLength;\n\nfunction maxHeap(input, i, animations) {\n  const left = 2 * i + 1;\n  const right = 2 * i + 2;\n  let max = i;\n\n  if (left < arrLength && input[left] > input[max]) {\n    max = left;\n  }\n\n  if (right < arrLength && input[right] > input[max]) {\n    max = right;\n  }\n\n  if (max !== i) {\n    swap(input, i, max, animations);\n    maxHeap(input, max, animations);\n  }\n}\n\nfunction swap(input, indexA, indexB, animations) {\n  animations.push([indexA, indexB]);\n  animations.push([indexA, indexB]);\n  animations.push([indexA, input[indexB], indexB, input[indexA]]);\n  const temp = input[indexA];\n  input[indexA] = input[indexB];\n  input[indexB] = temp;\n}\n\nfunction heapSort(input, animations) {\n  arrLength = input.length;\n\n  for (let i = Math.floor(arrLength / 2); i >= 0; i -= 1) {\n    maxHeap(input, i, animations);\n  }\n\n  for (let i = input.length - 1; i > 0; i--) {\n    swap(input, 0, i, animations);\n    arrLength--;\n\n    maxHeap(input, 0, animations);\n  }\n  return input;\n}\n","export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n","export function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  quickSort(auxiliaryArray, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction swap(items, leftIndex, rightIndex, animations) {\n  animations.push([leftIndex, rightIndex]);\n  animations.push([leftIndex, rightIndex]);\n  animations.push([leftIndex, items[rightIndex], rightIndex, items[leftIndex]]);\n  var temp = items[leftIndex];\n  items[leftIndex] = items[rightIndex];\n  items[rightIndex] = temp;\n}\nfunction partition(items, left, right, animations) {\n  var pivot = items[Math.floor((right + left) / 2)], //middle element\n    i = left, //left pointer\n    j = right; //right pointer\n  while (i <= j) {\n    while (items[i] < pivot) {\n      i++;\n    }\n    while (items[j] > pivot) {\n      j--;\n    }\n\n    if (i <= j) {\n      swap(items, i, j, animations); //sawpping two elements\n      i++;\n      j--;\n    }\n  }\n  return i;\n}\n\nfunction quickSort(items, left, right, animations) {\n  let index;\n  if (items.length > 1) {\n    index = partition(items, left, right, animations); //index returned from partition\n    if (left < index - 1) {\n      //more elements on the left side of the pivot\n      quickSort(items, left, index - 1, animations);\n    }\n    if (index < right) {\n      //more elements on the right side of the pivot\n      quickSort(items, index, right, animations);\n    }\n  }\n  return items;\n}\n","import React, { Component } from \"react\";\nimport \"./Visualizer.css\";\nimport * as algorithm_MS from \"../algorithms/mergeSort\";\nimport * as algorithm_BS from \"../algorithms/bubbleSort\";\nimport * as algorithm_HS from \"../algorithms/heapSort\";\nimport * as algorithm_QS from \"../algorithms/quickSort\";\nimport * as algorithm_IS from \"../algorithms/insertionSort\";\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 3;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 100;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = \"black\";\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = \"magenta\";\nclass Visualizer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(this.randomIntFromInterval(1, 100));\n    }\n    document.getElementById(\"btnBubble\").disabled = false;\n    document.getElementById(\"btnReset\").disabled = false;\n    document.getElementById(\"btnMerge\").disabled = false;\n    document.getElementById(\"btnQuick\").disabled = false;\n    document.getElementById(\"btnHeap\").disabled = false;\n    document.getElementById(\"btnInsertion\").disabled = false;\n    this.setState({ array });\n    this.colorBarsDefault(array);\n  }\n  colorBarsDefault(arr) {\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n    for (let i = 0; i < arr.length; i++) {\n      if (arrayBars[i] !== undefined) {\n        arrayBars[i].style.backgroundColor = \"black\";\n      }\n    }\n  }\n  randomIntFromInterval = (max, min) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  mergeSort() {\n    document.getElementById(\"btnBubble\").disabled = true;\n    document.getElementById(\"btnReset\").disabled = true;\n    document.getElementById(\"btnMerge\").disabled = true;\n    document.getElementById(\"btnQuick\").disabled = true;\n    document.getElementById(\"btnHeap\").disabled = true;\n    document.getElementById(\"btnInsertion\").disabled = true;\n    const animations = algorithm_MS.getMergeSortAnimations(this.state.array);\n    const sortedArray = algorithm_HS.getSortedArray(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}%`;\n          let count = 0;\n          for (let i = 0; i < sortedArray.length; i++) {\n            if (parseInt(arrayBars[i].style.height) === sortedArray[i]) {\n              arrayBars[i].style.backgroundColor = \"lime\";\n              count++;\n            }\n          }\n          if (count === NUMBER_OF_ARRAY_BARS) {\n            document.getElementById(\"btnReset\").disabled = false;\n          }\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n  bubbleSort() {\n    document.getElementById(\"btnBubble\").disabled = true;\n    document.getElementById(\"btnReset\").disabled = true;\n    document.getElementById(\"btnMerge\").disabled = true;\n    document.getElementById(\"btnQuick\").disabled = true;\n    document.getElementById(\"btnHeap\").disabled = true;\n    document.getElementById(\"btnInsertion\").disabled = true;\n    const animations = algorithm_BS.getBubbleSortAnimations(this.state.array);\n    const sortedArray = algorithm_HS.getSortedArray(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        if (arrayBars[barTwoIdx] !== undefined) {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = color;\n            barTwoStyle.backgroundColor = color;\n          }, i * ANIMATION_SPEED_MS);\n        }\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}%`;\n          let count = 0;\n          for (let i = 0; i < sortedArray.length; i++) {\n            if (parseInt(arrayBars[i].style.height) === sortedArray[i]) {\n              arrayBars[i].style.backgroundColor = \"lime\";\n              count++;\n            }\n          }\n          if (count === NUMBER_OF_ARRAY_BARS) {\n            document.getElementById(\"btnReset\").disabled = false;\n          }\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n  insertionSort() {\n    document.getElementById(\"btnBubble\").disabled = true;\n    document.getElementById(\"btnReset\").disabled = true;\n    document.getElementById(\"btnMerge\").disabled = true;\n    document.getElementById(\"btnQuick\").disabled = true;\n    document.getElementById(\"btnHeap\").disabled = true;\n    document.getElementById(\"btnInsertion\").disabled = true;\n    const animations = algorithm_IS.getInsertionSortAnimations(\n      this.state.array\n    );\n    const sortedArray = algorithm_HS.getSortedArray(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        if (arrayBars[barTwoIdx] !== undefined) {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = color;\n            barTwoStyle.backgroundColor = color;\n          }, i * ANIMATION_SPEED_MS);\n        }\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}%`;\n          let count = 0;\n          for (let i = 0; i < sortedArray.length; i++) {\n            if (parseInt(arrayBars[i].style.height) === sortedArray[i]) {\n              arrayBars[i].style.backgroundColor = \"lime\";\n              count++;\n            }\n          }\n          if (count === NUMBER_OF_ARRAY_BARS) {\n            document.getElementById(\"btnReset\").disabled = false;\n          }\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n  heapSort() {\n    document.getElementById(\"btnBubble\").disabled = true;\n    document.getElementById(\"btnReset\").disabled = true;\n    document.getElementById(\"btnMerge\").disabled = true;\n    document.getElementById(\"btnQuick\").disabled = true;\n    document.getElementById(\"btnHeap\").disabled = true;\n    document.getElementById(\"btnInsertion\").disabled = true;\n\n    const animations = algorithm_HS.getHeapSortAnimations(this.state.array);\n    const sortedArray = algorithm_HS.getSortedArray(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight1, barTwoIdx, newHeight2] = animations[i];\n\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n\n          barTwoStyle.height = `${newHeight2}%`;\n          barOneStyle.height = `${newHeight1}%`;\n\n          let count = 0;\n          for (let i = 0; i < sortedArray.length; i++) {\n            if (parseInt(arrayBars[i].style.height) === sortedArray[i]) {\n              arrayBars[i].style.backgroundColor = \"lime\";\n              count++;\n            }\n          }\n          if (count === NUMBER_OF_ARRAY_BARS) {\n            document.getElementById(\"btnReset\").disabled = false;\n          }\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    document.getElementById(\"btnBubble\").disabled = true;\n    document.getElementById(\"btnReset\").disabled = true;\n    document.getElementById(\"btnMerge\").disabled = true;\n    document.getElementById(\"btnQuick\").disabled = true;\n    document.getElementById(\"btnHeap\").disabled = true;\n    document.getElementById(\"btnInsertion\").disabled = true;\n    const animations = algorithm_QS.getQuickSortAnimations(this.state.array);\n\n    const sortedArray = algorithm_HS.getSortedArray(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight1, barTwoIdx, newHeight2] = animations[i];\n\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n\n          barTwoStyle.height = `${newHeight2}%`;\n          barOneStyle.height = `${newHeight1}%`;\n\n          let count = 0;\n          for (let i = 0; i < sortedArray.length; i++) {\n            if (parseInt(arrayBars[i].style.height) === sortedArray[i]) {\n              arrayBars[i].style.backgroundColor = \"lime\";\n              count++;\n            }\n          }\n          if (count === NUMBER_OF_ARRAY_BARS) {\n            document.getElementById(\"btnReset\").disabled = false;\n          }\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          {this.state.array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{ height: `${value}%` }}\n            >\n              {value}\n            </div>\n          ))}\n        </div>\n        <div>\n          <button id=\"btnReset\" onClick={() => this.resetArray()}>\n            New Array\n          </button>\n          <button id=\"btnMerge\" onClick={() => this.mergeSort()}>\n            Merge Sort\n          </button>\n          <button id=\"btnHeap\" onClick={() => this.heapSort()}>\n            Heap Sort\n          </button>\n          <button id=\"btnQuick\" onClick={() => this.quickSort()}>\n            Quick Sort\n          </button>\n          <button id=\"btnBubble\" onClick={() => this.bubbleSort()}>\n            Bubble Sort\n          </button>\n          <button id=\"btnInsertion\" onClick={() => this.insertionSort()}>\n            Insertion Sort\n          </button>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Visualizer;\n","export function getBubbleSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  doBubble(array, animations);\n  return animations;\n}\n// function doBubble(a, animations) {\n//   let swapped;\n//   let array = a.slice();\n//   do {\n//     swapped = false;\n//     for (let i = 0; i < array.length; i++) {\n//       animations.push([i, i + 1]);\n//       animations.push([i, i + 1]);\n//       if (array[i] > array[i + 1]) {\n//         animations.push([i, array[i + 1]]);\n\n//         let temp = array[i];\n//         array[i] = array[i + 1];\n//         array[i + 1] = temp;\n//         swapped = true;\n//       } else {\n//         animations.push([i, array[i]]);\n//       }\n//     }\n//   } while (swapped);\n//   // console.log(array);\n//   return array;\n// }\n\nfunction doBubble(a, animations) {\n  let array = a.slice();\n  for (let i = 0; i < array.length; i++) {\n    for (let j = 0; j < array.length - i; j++) {\n      animations.push([j, j + 1]);\n      animations.push([j, j + 1]);\n      if (array[j] > array[j + 1]) {\n        animations.push([j, array[j + 1]]);\n        let temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n      } else {\n        animations.push([j, array[j]]);\n      }\n    }\n  }\n  return array;\n}\n","export function getInsertionSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  insertionSort(array, animations);\n  return animations;\n}\nfunction insertionSort(arr, animations) {\n  const len = arr.length;\n  for (let i = 0; i < len; i++) {\n    let el = arr[i];\n    let j;\n\n    for (j = i - 1; j >= 0 && arr[j] > el; j--) {\n      animations.push([j + 1, j]);\n      animations.push([j + 1, j]);\n      animations.push([j + 1, arr[j]]);\n      arr[j + 1] = arr[j];\n    }\n\n    animations.push([j + 1, i]);\n    animations.push([j + 1, i]);\n    animations.push([j + 1, el]);\n    arr[j + 1] = el;\n  }\n  //console.log(arr);\n  return arr;\n}\n","import React, { Component } from \"react\";\n\nimport \"./Navbar.css\";\nclass Navbar extends Component {\n  state = {};\n  render() {\n    return <nav>SORTING VISUALIZER</nav>;\n  }\n}\n\nexport default Navbar;\n","import React from \"react\";\n//import logo from \"./logo.svg\";\nimport Visualizer from \"./components/Visualizer\";\nimport \"./App.css\";\nimport NavBar from \"./components/Navbar\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <NavBar />\n      <div className=\"mainapp\">\n        <Visualizer />\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}